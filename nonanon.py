import telebot
import time
import json
import os
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

bot = telebot.TeleBot("TOKEN") #change
language = 1 #1 - US, 7 - RU
ADMINS = {777} # change
CHANNEL_ID = 888 # change
users = {}
message_logs = {}

BAN_LIST_FILE = 'ban_list.json'
LOG_FILE = 'message_log.json'

def load_data():
	global users
	if os.path.exists(BAN_LIST_FILE):
		with open(BAN_LIST_FILE, 'r') as file:
			users = json.load(file)

def save_data():
	with open(BAN_LIST_FILE, 'w') as file:
		json.dump(users, file)

def load_message_logs():
	global message_logs
	if os.path.exists(LOG_FILE):
		with open(LOG_FILE, 'r') as file:
			message_logs = json.load(file)

def save_message_logs():
	with open(LOG_FILE, 'w') as file:
		json.dump(message_logs, file)

def admin_menu():
	markup = ReplyKeyboardMarkup(resize_keyboard=True)
	if language == 7:
		markup.add("–ë–∞–Ω –º–µ–Ω—é", "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
	else:
		markup.add("Ban menu", "Message users")
	return markup

def ban_menu():
	markup = ReplyKeyboardMarkup(resize_keyboard=True)
	if language == 7:
		markup.add("–ë–∞–Ω", "–†–∞–∑–±–∞–Ω", "–ù–∞–∑–∞–¥")
	else:
		markup.add("Ban", "Unban", "Back")
	return markup

def yes_no_menu():
	markup = ReplyKeyboardMarkup(resize_keyboard=True)
	if language == 7:
		markup.add("–î–∞", "–ù–µ—Ç")
	else:
		markup.add("Yes", "No")
	return markup

def cancel_menu():
	markup = ReplyKeyboardMarkup(resize_keyboard=True)
	if language == 7:
		markup.add("–û—Ç–º–µ–Ω–∞")
	else:
		markup.add("Cancel")
	return markup

def start_start():
	try:
		if language == 7:
			bot.send_message(ADMINS, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
		else:
			bot.send_message(ADMINS, "Bot started")
	except:
		return

start_start()

@bot.message_handler(func=lambda message: message.from_user.id in ADMINS and (message.text == "–ë–∞–Ω –º–µ–Ω—é" or message.text == "Ban menu"))
def show_ban_menu(message):
	if language == 7:
		bot.send_message(message.chat.id, "üîí –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ban_menu())
	else:
		bot.send_message(message.chat.id, "üîí Choose action:", reply_markup=ban_menu())

@bot.message_handler(func=lambda message: message.from_user.id in ADMINS and (message.text == "–ù–∞–∑–∞–¥" or message.text == "Back"))
def back_to_admin_menu(message):
	if language == 7:
		bot.send_message(message.chat.id, "üîß –ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=admin_menu())
	else:
		bot.send_message(message.chat.id, "üîß Admin menu", reply_markup=admin_menu())

@bot.message_handler(func=lambda message: message.from_user.id in ADMINS and (message.text == "–ë–∞–Ω" or message.text == "Ban"))
def process_ban(message):
	if language == 7:
		bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
	else:
		bot.send_message(message.chat.id, "Enter user UID to ban:")
	bot.register_next_step_handler(message, yn_ban)

@bot.message_handler(func=lambda message: message.from_user.id in ADMINS and (message.text == "–†–∞–∑–±–∞–Ω" or message.text == "Unban"))
def process_unban(message):
	if language == 7:
		bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
	else:
		bot.send_message(message.chat.id, "Enter user UID to unban:")
	bot.register_next_step_handler(message, yn_unban)

def yn_ban(message):
	try:
		ban_id = int(message.text)
	except ValueError:
		if language == 7:
			bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UID!", reply_markup=admin_menu())
		else:
			bot.send_message(message.chat.id, "‚ùå Enter correct UID!", reply_markup=admin_menu())
		return

	users[ban_id] = 'ban'
	save_data()
	if language == 7:
		bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UID {ban_id} –∑–∞–±–∞–Ω–µ–Ω!", reply_markup=admin_menu())
	else:
		bot.send_message(message.chat.id, f"‚úÖ User with UID {ban_id} banned!", reply_markup=admin_menu())

def yn_unban(message):
	try:
		ban_id = int(message.text)
	except ValueError:
		if language == 7:
			bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UID!", reply_markup=admin_menu())
		else:
			bot.send_message(message.chat.id, "‚ùå Enter correct UID!", reply_markup=admin_menu())
		return

	if users.get(ban_id) == 'ban':
		users[ban_id] = 'unban'
		save_data()
		if language == 7:
			bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UID {ban_id} —Ä–∞–∑–±–∞–Ω–µ–Ω!", reply_markup=admin_menu())
		else:
			bot.send_message(message.chat.id, f"‚úÖ User with UID {ban_id} unbanned!", reply_markup=admin_menu())
	else:
		if language == 7:
			bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–Ω–µ!", reply_markup=admin_menu())
		else:
			bot.send_message(message.chat.id, "‚ùå This user is not banned!", reply_markup=admin_menu())

@bot.message_handler(func=lambda message: message.from_user.id in ADMINS and (message.text == "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º" or message.text == "Message users"))
def ask_for_message_content(message):
	if language == 7:
		bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (/z –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
	else:
		bot.send_message(message.chat.id, "Enter message text (/z to cancel):")
	bot.register_next_step_handler(message, process_message_text)

def process_message_text(message):
	if message.text.lower() == "/z":
		if language == 7:
			bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_menu())
		else:
			bot.send_message(message.chat.id, "‚ùå Operation canceled.", reply_markup=admin_menu())
		return

	text = message.text
	if language == 7:
		bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –≤–ª–æ–∂–µ–Ω–∏–µ /yes (/no –µ—Å–ª–∏ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π)")
	else:
		bot.send_message(message.chat.id, "Send attachment /yes (/no if no attachments)")
	bot.register_next_step_handler(message, ask_for_attachment, text)

def ask_for_attachment(message, text):
	if message.content_type == 'text' and message.text.lower() == "/no":
		if language == 7:
			bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –≤–ª–æ–∂–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç.")
			bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è inline (/no –µ—Å–ª–∏ –±–µ–∑ —Å—Å—ã–ª–∫–∏):")
		else:
			bot.send_message(message.chat.id, "Okay, no attachments.")
			bot.send_message(message.chat.id, "Enter inline link (/no if no link):")
		bot.register_next_step_handler(message, ask_for_link, text, None, None) 
		return

	media_files = []
	if message.content_type == 'text' and message.text.lower() == "/yes":
		if language == 7:
			bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /no):")
		else:
			bot.send_message(message.chat.id, "Send one photo or video (send /no to finish):")
		bot.register_next_step_handler(message, process_attachments, text, media_files)
		return

	if language == 7:
		bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /yes –∏–ª–∏ /no.")
	else:
		bot.send_message(message.chat.id, "Invalid command. Please use /yes or /no.")
	bot.register_next_step_handler(message, ask_for_attachment, text)

def process_attachments(message, text, media_files):
	if message.content_type == 'text' and message.text.lower() == "/no":
		if language == 7:
			bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –≤–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç.")
			bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è inline (/no –µ—Å–ª–∏ –±–µ–∑ —Å—Å—ã–ª–∫–∏):")
		else:
			bot.send_message(message.chat.id, "Okay, no attachments.")
			bot.send_message(message.chat.id, "Enter inline link (/no if no link):")
		bot.register_next_step_handler(message, ask_for_link, text, media_files, None)
		return

	if message.content_type in ['photo', 'video']:
		if len(media_files) >= 1:
			if language == 7:
				bot.send_message(message.chat.id, "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ–¥–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ. –ë–æ–ª—å—à–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–ª—å–∑—è.")
			else:
				bot.send_message(message.chat.id, "You already sent one attachment. Can't add more.")
		else:
			media_files.append(message)

	if language == 7:
		bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è inline (/no –µ—Å–ª–∏ –±–µ–∑ —Å—Å—ã–ª–∫–∏):")
	else:
		bot.send_message(message.chat.id, "Enter inline link (/no if no link):")
	bot.register_next_step_handler(message, ask_for_link, text, media_files, None)

def ask_for_link(message, text, media_files, link):
	if message.text.lower() == "/no":
		if language == 7:
			bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –±–µ–∑ —Å—Å—ã–ª–∫–∏.")
		else:
			bot.send_message(message.chat.id, "Okay, no link.")
		send_message_to_users(message, text, media_files, None)
		return

	link = message.text
	send_message_to_users(message, text, media_files, link)

def send_message_to_users(message, text, media_files, link):
	confirmation_markup = yes_no_menu()
	if language == 7:
		bot.send_message(message.chat.id, "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=confirmation_markup)
	else:
		bot.send_message(message.chat.id, "Do you want to send this message?", reply_markup=confirmation_markup)

	final_message = f"Text: {text}\n" if language == 1 else f"–¢–µ–∫—Å—Ç: {text}\n"
	if link:
		final_message += f"Link: {link}\n" if language == 1 else f"–°—Å—ã–ª–∫–∞: {link}\n"
	if media_files:
		final_message += f"Attachments: {len(media_files)} files.\n" if language == 1 else f"–í–ª–æ–∂–µ–Ω–∏—è: {len(media_files)} —Ñ–∞–π–ª–æ–≤.\n"

	bot.send_message(message.chat.id, final_message)
	bot.register_next_step_handler(message, confirm_send_message, text, media_files, link)

def confirm_send_message(message, text, media_files, link):
	if message.text.lower() == "–¥–∞" or message.text.lower() == "yes":
		sent_users = set()

		for user_id, status in users.items():
			if status == 'unban':
				if send_message_to_user(user_id, text, media_files, link):
					sent_users.add(user_id)

		try:
			chat_members = bot.get_chat_administrators(CHANNEL_ID)
			channel_members = bot.get_chat_members_count(CHANNEL_ID)
		except Exception as e:
			if language == 7:
				bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}", reply_markup=admin_menu())
			else:
				bot.send_message(message.chat.id, f"‚ùå Channel access error: {e}", reply_markup=admin_menu())
			return

		for user_id in channel_members:
			if user_id not in sent_users:
				send_message_to_user(user_id, text, media_files, link)

		if language == 7:
			bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=admin_menu())
		else:
			bot.send_message(message.chat.id, "‚úÖ Message sent to all suitable users.", reply_markup=admin_menu())
	else:
		if language == 7:
			bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_menu())
		else:
			bot.send_message(message.chat.id, "‚ùå Operation canceled.", reply_markup=admin_menu())

def send_message_to_user(user_id, text, media_files, link):
	try:
		markup = InlineKeyboardMarkup()
		if link:
			if language == 7:
				markup.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏", url=link))
			else:
				markup.add(InlineKeyboardButton("Go", url=link))

		if media_files:
			for file in media_files:
				if file.content_type == 'photo':
					bot.send_photo(user_id, file.photo[0].file_id, caption=text, reply_markup=markup)
				elif file.content_type == 'video':
					bot.send_video(user_id, file.video.file_id, caption=text, reply_markup=markup)
		else:
			bot.send_message(user_id, text, reply_markup=markup)
		return True
	except Exception as e:
		print(f"Error sending message to user {user_id}: {e}")
		return False

@bot.message_handler(commands=['start'])
def start(message):
	user_id = message.from_user.id
	if user_id not in users:
		users[user_id] = 'unban'

	if user_id in ADMINS:
		bot.send_message(user_id, "üîß –ê–¥–º–∏–Ω –º–µ–Ω—é" if language == 7 else "üîß Admin menu", reply_markup=admin_menu())
	else:
		if language == 7:
			bot.send_message(user_id, "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ *–õ—É—á—à–∏–π –∫–∞–Ω–∞–ª*!\n\n‚úâÔ∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\nüì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\nüí¨ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!", parse_mode="Markdown")
		else:
			bot.send_message(user_id, "üî• Welcome to the *Best channel* anonymous messages bot!\n\n‚úâÔ∏è Here you can send anonymous messages to admins.\nüì∏ Just send text, photo, video or document.\nüí¨ Your message will be delivered anonymously!", parse_mode="Markdown")

@bot.message_handler(content_types=['text', 'photo', 'video', 'document', 'sticker', 'voice', 'video_note', 'animation'])
def handle_message(message):
	user_id = message.from_user.id

	if user_id in ADMINS and message.reply_to_message:
		reply_text = message.text or ("[No text]" if language == 1 else "[–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]")
		if message.reply_to_message.message_id in message_logs:
			sender_id, _ = message_logs[message.reply_to_message.message_id]
			if language == 7:
				bot.send_message(message.chat.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ!")
			else:
				bot.send_message(message.chat.id, "‚úÖ Success!")
		else:
			if language == 7:
				bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
			else:
				bot.send_message(message.chat.id, "‚ùå Error! Can't determine recipient.")
			return

		try:
			if language == 7:
				bot.send_message(sender_id, f"üì© *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{reply_text}", parse_mode="Markdown")
			else:
				bot.send_message(sender_id, f"üì© *Admin reply:*\n\n{reply_text}", parse_mode="Markdown")
		except Exception as e:
			if language == 7:
				bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
			else:
				bot.send_message(message.chat.id, f"‚ùå Error sending reply: {e}")
		return

	if users.get(user_id) == 'ban':
		if language == 7:
			bot.send_message(message.chat.id, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
		else:
			bot.send_message(message.chat.id, "üö´ You are banned and can't use this bot.")
		return

	if user_id in ADMINS:
		if language == 7:
			bot.send_message(message.chat.id, "–í—ã –∞–¥–º–∏–Ω, –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
		else:
			bot.send_message(message.chat.id, "You're admin, you don't need to send anonymous messages.")
		return

	if language == 7:
		user_info = f"üë§ *–ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:*\nüîπ ID: `{user_id}`\n"
	else:
		user_info = f"üë§ *New anonymous sender:*\nüîπ ID: `{user_id}`\n"

	if message.from_user.username:
		safe_username = message.from_user.username.replace("_", "\\_")
		user_info += f"üîπ Username: @{safe_username}\n"
	if message.from_user.first_name:
		user_info += f"üîπ First name: {message.from_user.first_name}\n" if language == 1 else f"üîπ –ò–º—è: {message.from_user.first_name}\n"
	if message.from_user.last_name:
		user_info += f"üîπ Last name: {message.from_user.last_name}\n" if language == 1 else f"üîπ –§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n"

	admins_notified = False

	for admin_id in ADMINS:
		try:
			bot.send_message(admin_id, user_info, parse_mode="Markdown")

			forwarded_message = None
			if message.text:
				forwarded_message = bot.send_message(admin_id, message.text)
			elif message.photo:
				forwarded_message = bot.send_photo(admin_id, message.photo[-1].file_id, caption=message.caption or "")
			elif message.animation:
				forwarded_message = bot.send_animation(admin_id, message.animation.file_id, caption=message.caption or "")
			elif message.video:
				forwarded_message = bot.send_video(admin_id, message.video.file_id, caption=message.caption or "")
			elif message.sticker:
				forwarded_message = bot.send_sticker(admin_id, message.sticker.file_id)
			elif message.voice:
				forwarded_message = bot.send_voice(admin_id, message.voice.file_id)
			elif message.video_note:
				forwarded_message = bot.send_video_note(admin_id, message.video_note.file_id)
			elif message.document:
				forwarded_message = bot.send_document(admin_id, message.document.file_id, caption=message.caption or "")
			else:
				if language == 7:
					bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
				else:
					bot.send_message(message.chat.id, "‚ùå Error! Unsupported message type.")
				return

			if forwarded_message and forwarded_message.message_id not in message_logs:
				message_logs[forwarded_message.message_id] = [user_id, [admin_id]]
			elif forwarded_message:
				message_logs[forwarded_message.message_id][1].append(admin_id)

			save_message_logs()
			admins_notified = True
		except Exception as e:
			print(f"Error sending to admin {admin_id}: {e}")

	if admins_notified:
		if language == 7:
			bot.send_message(message.chat.id, "‚úÖ –í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
		else:
			bot.send_message(message.chat.id, "‚úÖ Your anonymous message has been delivered.")
	else:
		if language == 7:
			bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
		else:
			bot.send_message(message.chat.id, "‚ùå Error! Message not delivered.")

load_data()
load_message_logs()

def run_bot():
	while True:
		try:
			bot.polling(none_stop=True, interval=0)
		except telebot.apihelper.ApiException as e:
			print(f"Telegram API error: {e}")
		except Exception as e:
			print(f"Error occurred: {e}")

		print("Lost connection to Telegram, waiting to reconnect...")
		time.sleep(5)

if __name__ == "__main__":
	run_bot()